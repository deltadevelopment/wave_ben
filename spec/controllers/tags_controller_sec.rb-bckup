require 'rails_helper'

describe TagsController do
  # Remember to test both user tags and hashtags

  describe "#create" do
  
    context "tagging a shared bucket" do

      context "bucket is locked" do

        context "bucket is open to taggees" do
          let!(:bucket) { FactoryGirl.create(:shared_bucket, 
                                            :locked, :taggees, :with_user, :with_taggee) }
          let(:tag) { FactoryGirl.build(:hashtag) }

          let(:valid_params) do
            { bucket_id: bucket.id,
              tag: {
                tag_string: tag.tag_string 
              } 
            } 
          end

          context "user is owner" do
          
            it "returns 201 when the owner adds a tag" do
              allow(controller).to receive(:current_user) { bucket.user }
              post :create, valid_params
              expect(response).to have_http_status(201)
            end

            it "saves the record when the owner adds a tag" do
              allow(controller).to receive(:current_user) { bucket.user }
              expect{
                post :create, valid_params
              }.to change(Tag, :count).by(1)
            end

          end

          context "user is tagged" do

            it "returns 401 when tagged user adds a tag" do
              allow(controller).to receive(:current_user) { bucket.tags[0].taggee }
              post :create, valid_params
              expect(response).to have_http_status(401)
            end

            it "does not save the record when tagged users add a tag" do
              allow(controller).to receive(:current_user) { bucket.tags[0].taggee }
              expect{
                post :create, valid_params
              }.to change(Tag, :count).by(0)
            end

          end

          context "user is untagged" do
          
            it "returns 401 when untagged users add a tag" do 
              allow(controller).to receive(:current_user) { User.new }
              post :create, valid_params
              expect(response).to have_http_status(401)
            end

            it "does not save the record when untagged users add a tag" do
              allow(controller).to receive(:current_user) { User.new }
              expect{
                post :create, valid_params
              }.to change(Tag, :count).by(0)
            end

          end

        end

        context "bucket is open to everyone" do

          let!(:bucket) { FactoryGirl.create(:shared_bucket, 
                                            :locked, :everyone, :with_user, :with_taggee) }
          let(:tag) { FactoryGirl.build(:hashtag) }

          let(:valid_params) do
            { bucket_id: bucket.id,
              tag: {
                tag_string: tag.tag_string 
              } 
            } 
          end

          context "user is owner" do
            before do
              allow(controller).to receive(:current_user) { bucket.user }
            end

            it "returns 201 when the owner adds a tag" do
              post :create, valid_params
              expect(response).to have_http_status(201)
            end

            it "saves the record when the owner adds a tag" do
              expect{
                post :create, valid_params
              }.to change(Tag, :count).by(1)
            end

          end

          context "user is tagged" do
            before do
              allow(controller).to receive(:current_user) { bucket.tags[0].taggee }
            end

            it "returns 201 when tagged users add a tag" do
              post :create, valid_params
              expect(response).to have_http_status(401)
            end

            it "saves the record when tagged users add a tag" do
              expect{
                post :create, valid_params
              }.to change(Tag, :count).by(1)
            end

          end
          
          context "user is untagged" do
            before { allow(controller).to receive(:current_user) { User.new } }
            it "returns 401 when untagged users add a tag" do
              post :create, valid_params
              expect(response).to have_http_status(401)
            end

            it "does not save the record when untagged users add a tag" do
              expect{
                post :create, valid_params
              }.to change(Tag, :count).by(0)
            end
          end

          
        end

      end

      context "bucket is unlocked" do

        context "bucket is visible to tagged users" do
          let!(:bucket) { FactoryGirl.create(:shared_bucket, 
                                            :taggees, :with_user, :with_taggee) }
          let(:tag) { FactoryGirl.build(:hashtag) }

          let(:valid_params) do
            { bucket_id: bucket.id,
              tag: {
                tag_string: tag.tag_string 
              } 
            } 
          end

          context "user is owner" do
            before do
              allow(controller).to receive(:current_user) { bucket.user }
            end

            it "returns 201 when the owner adds a tag" do
              post :create, valid_params
              expect(response).to have_http_status(201)
            end

            it "saves the record when the owner adds a tag" do
              expect{
                post :create, valid_params
              }.to change(Tag, :count).by(1)
            end

          end

          context "user is tagged" do
            before do
              allow(controller).to receive(:current_user) { bucket.tags[0].taggee }
            end

            it "returns 201 when tagged users add a tag" do
              post :create, valid_params
              expect(response).to have_http_status(201)
            end

            it "saves the record when tagged users add a tag" do
              expect{
                post :create, valid_params
              }.to change(Tag, :count).by(1)
            end

          end
          
        end
        
        context "bucket is open to everyone" do
        end

      end

      context "when tagging a bucket with a tag that has been added" do
        it "returns 201"
        it "does not increase the tag count"
      end

      context "when adding an existing hashtag" do
        it "returns 201" 
        it "does not increase the hashtag count"
      end

    end

    context "tagging a user bucket" do

      it "returns 400"

      it "does not save the record"

    end

    context "tagging a drop" do
    end

    context "with invalid credentials" do

      it "returns 401" 

      it "does not save the record"

    end

  end

end
